{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/projetos/volanty/src/components/card/CalculatorForm.js\";\nimport React, { Component } from 'react';\nimport Results from '../calculator/Results';\nimport SelectBox from './SelectBox';\nimport '../../App.scss';\nimport mock from '../../mock.json';\nconst endpoint = 'http://fipeapi.appspot.com/api/1/carros';\n\nclass CalculatorForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      brands: [],\n      models: [],\n      years: [],\n      brand: '',\n      model: '',\n      year: '',\n      selectedCar: false\n    };\n    this.onSelectBrand = this.onSelectBrand.bind(this);\n    this.onSelectModel = this.onSelectModel.bind(this);\n    this.onSelectYear = this.onSelectYear.bind(this);\n    this.updateimage = this.updateimage.bind(this);\n  }\n\n  componentDidMount() {\n    let initialBrands = [];\n    fetch(\"\".concat(endpoint, \"/marcas.json\")).then(response => {\n      return response.json();\n    }).then(data => {\n      initialBrands = data.map(brand => {\n        return brand;\n      });\n      this.setState({\n        brands: initialBrands\n      });\n    }).catch(error => {\n      console.log('API indisponível!');\n      console.error(error);\n      initialBrands = mock.brands.map(brand => {\n        return brand;\n      });\n      this.setState({\n        brands: initialBrands\n      });\n    });\n  }\n\n  updateimage() {\n    let keys = [];\n\n    if (this.state.brand !== '') {\n      const brand = this.state.brand;\n      const brands = this.state.brands;\n      const brandObj = brands.find(b => parseInt(b.id) === parseInt(brand));\n      keys.push(brandObj.fipe_name);\n    }\n\n    if (this.state.model !== '') {\n      const model = this.state.model;\n      const models = this.state.models;\n      const modelObj = models.find(m => parseInt(m.id) === parseInt(model));\n      keys.push(modelObj.fipe_name.split(' ')[0]);\n    }\n\n    if (this.state.year !== '') {\n      const year = this.state.year;\n      const years = this.state.years;\n      const yearObj = years.find(y => parseInt(y.id) === parseInt(year));\n      keys.push(yearObj.name.split(' ')[0]);\n    }\n\n    this.props.onUpdateSelection(keys);\n  }\n\n  onSelectBrand(event) {\n    let selectedBrand = event.target.value;\n\n    if (selectedBrand === '') {\n      this.setState({\n        selectedCar: false,\n        brand: '',\n        models: [],\n        model: '',\n        years: [],\n        year: ''\n      });\n      return false;\n    }\n\n    let models = [];\n    this.setState({\n      brand: selectedBrand,\n      models: [],\n      model: '',\n      years: [],\n      year: '',\n      selectedCar: false\n    });\n    fetch(\"\".concat(endpoint, \"/carros/veiculos/\").concat(selectedBrand, \".json\")).then(response => {\n      return response.json();\n    }).then(data => {\n      models = data.map(model => {\n        return model;\n      });\n      this.setState({\n        models: models\n      });\n      this.updateimage();\n    }).catch(error => {\n      console.log('API indisponível!');\n      console.error(error);\n      models = mock.models.map(model => {\n        return model;\n      });\n      this.setState({\n        models: models\n      });\n      this.updateimage();\n    }).finally(() => {\n      let element = document.querySelector(\".SelectBox:last-child\");\n      element.scrollIntoView({\n        behavior: 'smooth'\n      });\n    });\n  }\n\n  onSelectModel(event) {\n    let selectedModel = event.target.value;\n\n    if (selectedModel === '') {\n      this.setState({\n        model: '',\n        year: '',\n        years: [],\n        selectedCar: false\n      });\n      return false;\n    }\n\n    let selectedBrand = this.state.brand;\n    let years = [];\n    this.setState({\n      model: selectedModel,\n      years: [],\n      year: '',\n      selectedCar: false\n    });\n    fetch(\"\".concat(endpoint, \"/carros/veiculo/\").concat(selectedBrand, \"/\").concat(selectedModel, \".json\")).then(response => {\n      return response.json();\n    }).then(data => {\n      years = data.map(year => {\n        return year;\n      });\n      this.setState({\n        years: years\n      });\n      this.updateimage();\n    }).catch(error => {\n      console.log('API indisponível!');\n      console.error(error);\n      years = mock.years.map(year => {\n        return year;\n      });\n      this.setState({\n        years: years\n      });\n      this.updateimage();\n    }).finally(() => {\n      let element = document.querySelector(\".SelectBox:last-child\");\n      element.scrollIntoView({\n        behavior: 'smooth'\n      });\n    });\n  }\n\n  onSelectYear(event) {\n    let selectedYear = event.target.value;\n\n    if (selectedYear === '') {\n      this.setState({\n        year: '',\n        selectedCar: false\n      });\n      return false;\n    }\n\n    let selectedBrand = this.state.brand;\n    let selectedModel = this.state.model;\n    this.setState({\n      year: selectedYear\n    });\n    fetch(\"\".concat(endpoint, \"/carros/veiculo/\").concat(selectedBrand, \"/\").concat(selectedModel, \"/\").concat(selectedYear, \".json\")).then(response => {\n      return response.json();\n    }).then(data => {\n      if (!data) return false;\n      this.setState({\n        selectedCar: data\n      });\n      this.updateimage();\n    }).catch(error => {\n      console.log('API indisponível!');\n      console.error(error);\n      this.setState({\n        selectedCar: mock.result\n      });\n      this.updateimage();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"CalculatorForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(SelectBox, {\n      label: \"Marca\",\n      options: this.state.brands,\n      onChangeEvent: this.onSelectBrand,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), this.state.models.length > 0 ? React.createElement(SelectBox, {\n      label: \"Modelo\",\n      options: this.state.models,\n      onChangeEvent: this.onSelectModel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }) : null, this.state.years.length > 0 ? React.createElement(SelectBox, {\n      label: \"Ano\",\n      options: this.state.years,\n      onChangeEvent: this.onSelectYear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }) : null), this.state.selectedCar ? React.createElement(Results, {\n      showSelectedCar: this.state.selectedCar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default CalculatorForm;","map":{"version":3,"sources":["/Users/macbook/projetos/volanty/src/components/card/CalculatorForm.js"],"names":["React","Component","Results","SelectBox","mock","endpoint","CalculatorForm","constructor","props","state","brands","models","years","brand","model","year","selectedCar","onSelectBrand","bind","onSelectModel","onSelectYear","updateimage","componentDidMount","initialBrands","fetch","then","response","json","data","map","setState","catch","error","console","log","keys","brandObj","find","b","parseInt","id","push","fipe_name","modelObj","m","split","yearObj","y","name","onUpdateSelection","event","selectedBrand","target","value","finally","element","document","querySelector","scrollIntoView","behavior","selectedModel","selectedYear","result","render","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Results from '../calculator/Results'\nimport SelectBox from './SelectBox'\nimport '../../App.scss'\nimport mock from '../../mock.json'\n\nconst endpoint = 'http://fipeapi.appspot.com/api/1/carros'\n\nclass CalculatorForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            brands: [],\n            models: [],\n            years: [],\n            brand: '',\n            model: '',\n            year: '',\n            selectedCar: false\n        }\n\n        this.onSelectBrand = this.onSelectBrand.bind(this);\n        this.onSelectModel = this.onSelectModel.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.updateimage = this.updateimage.bind(this);\n    }\n\n    componentDidMount() {\n        let initialBrands = [];\n        fetch(`${endpoint}/marcas.json`)\n            .then(response => {\n                return response.json();\n            }).then(data => {\n                initialBrands = data.map((brand) => {\n                    return brand\n                });\n                this.setState({\n                    brands: initialBrands,\n                });\n            }).catch((error) => {\n                console.log('API indisponível!')\n                console.error(error)\n                initialBrands = mock.brands.map((brand) => {\n                    return brand\n                });\n                this.setState({\n                    brands: initialBrands,\n                });\n            })\n    }\n\n    updateimage() {\n        let keys = []\n        if(this.state.brand !== '') {\n            const brand = this.state.brand\n            const brands = this.state.brands\n            const brandObj = brands.find(b => parseInt(b.id) === parseInt(brand));\n            keys.push(brandObj.fipe_name)\n        }\n        if(this.state.model !== '') {\n            const model = this.state.model\n            const models = this.state.models\n            const modelObj = models.find(m => parseInt(m.id) === parseInt(model));\n            keys.push(modelObj.fipe_name.split(' ')[0])\n        }\n        if(this.state.year !== '') {\n            const year = this.state.year\n            const years = this.state.years\n            const yearObj = years.find(y => parseInt(y.id) === parseInt(year));\n            keys.push(yearObj.name.split(' ')[0])\n        }\n        this.props.onUpdateSelection(keys);\n    }\n\n    onSelectBrand(event) {\n        let selectedBrand = event.target.value\n\n        if(selectedBrand === '') {\n            this.setState({selectedCar: false, brand: '', models: [], model: '', years: [], year: ''})\n            return false\n        }\n        let models = []\n\n        this.setState({brand: selectedBrand, models: [], model: '', years: [], year: '', selectedCar: false})\n        \n        fetch(`${endpoint}/carros/veiculos/${selectedBrand}.json`)\n            .then(response => {\n                return response.json();\n            }).then(data => {\n                models = data.map((model) => {\n                    return model\n                });\n                this.setState({models: models});\n                this.updateimage()\n            }).catch(error => {\n                console.log('API indisponível!')\n                console.error(error)\n                models = mock.models.map((model) => {\n                    return model\n                });\n                this.setState({models: models});\n                this.updateimage()\n            }).finally(()=> {\n                let element = document.querySelector(\".SelectBox:last-child\")\n                element.scrollIntoView({ behavior: 'smooth'})\n            })\n    }\n\n    onSelectModel(event) {\n        let selectedModel = event.target.value\n        if(selectedModel === '') {\n            this.setState({model: '', year: '', years: [], selectedCar: false})\n            return false\n        }\n\n        let selectedBrand = this.state.brand\n        let years = []\n\n        this.setState({model: selectedModel, years: [], year: '', selectedCar: false})\n        \n        fetch(`${endpoint}/carros/veiculo/${selectedBrand}/${selectedModel}.json`)\n            .then(response => {\n                return response.json();\n            }).then(data => {\n                years = data.map((year) => {\n                    return year\n                });\n                this.setState({years: years})\n                this.updateimage()\n            }).catch(error => {\n                console.log('API indisponível!')\n                console.error(error)\n                years = mock.years.map((year) => {\n                    return year\n                });\n                this.setState({years: years})\n                this.updateimage()\n            }).finally(()=> {\n                let element = document.querySelector(\".SelectBox:last-child\")\n                element.scrollIntoView({ behavior: 'smooth'})\n            })\n    }\n\n    onSelectYear(event) {\n        let selectedYear = event.target.value\n        if(selectedYear === '') {\n            this.setState({year: '', selectedCar: false})\n            return false\n        }\n\n        let selectedBrand = this.state.brand\n        let selectedModel = this.state.model\n\n        this.setState({year: selectedYear})\n        \n        fetch(`${endpoint}/carros/veiculo/${selectedBrand}/${selectedModel}/${selectedYear}.json`)\n            .then(response => {\n                return response.json();\n            }).then(data => {\n                if(!data) return false\n                this.setState({selectedCar: data})\n                this.updateimage()\n            }).catch(error => {\n                console.log('API indisponível!')\n                console.error(error)\n                this.setState({selectedCar: mock.result})\n                this.updateimage()\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"CalculatorForm\">\n                <form>\n                    <SelectBox label=\"Marca\" options={this.state.brands} onChangeEvent={this.onSelectBrand}/>\n                    {this.state.models.length > 0? <SelectBox label=\"Modelo\" options={this.state.models} onChangeEvent={this.onSelectModel}/> : null}\n                    {this.state.years.length > 0? <SelectBox label=\"Ano\" options={this.state.years} onChangeEvent={this.onSelectYear}/> : null}\n                </form>\n                { this.state.selectedCar ? <Results showSelectedCar={this.state.selectedCar} /> : null }\n            </div>\n        );\n    }\n}\n\nexport default CalculatorForm;\n"]},"metadata":{},"sourceType":"module"}